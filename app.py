import streamlit as st
import pandas as pd
from langchain_google_genai import GoogleGenerativeAI
from langchain_experimental.agents.agent_toolkits import create_csv_agent
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain
from langchain.prompts import PromptTemplate
import plotly.express as px
import plotly.io as pio # Necess√°rio para ler o JSON do Plotly
import tempfile
import os
import logging
import zipfile
import gzip
import io
import json # Necess√°rio para parsing de JSON
from langchain.agents import AgentExecutor

# Configura√ß√£o de Logs para Debug (√ötil no ambiente local)
logging.basicConfig(level=logging.INFO)

# --- Configura√ß√£o da P√°gina e da API Key ---
st.set_page_config(
    page_title="Multi Agente Analista de CSV Fiscal",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Verifica a chave de API
if "GEMINI_API_KEY" not in st.secrets:
    st.error("Chave de API do Gemini n√£o encontrada. Configure GEMINI_API_KEY no secrets.toml.")
    st.stop()

# --- Fun√ß√µes de Inicializa√ß√£o e Processamento de Arquivos ---

def load_llm_and_memory(custom_instructions=""):
    """Carrega o LLM e configura a mem√≥ria de conversa com instru√ß√µes personalizadas."""
    try:
        # Inicializa o LLM (Gemini Flash √© ideal para esta tarefa)
        llm = GoogleGenerativeAI(
            model="gemini-2.5-flash",
            api_key=st.secrets["GEMINI_API_KEY"],
            temperature=0.1
        )
        
        # Configura a mem√≥ria do agente
        memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        
        # --- PROMPT GENERALIZADO COM FOCO FISCAL E INSTRU√á√ïES DIN√ÇMICAS ---
        analyst_prompt = f"""
        Voc√™ √© um **Multi Agente de IA SUPER ESPECIALISTA** em Contabilidade, Big Data, An√°lise de Dados e Python.
        Sua principal tarefa √© realizar a **An√°lise Explorat√≥ria de Dados (EDA)** detalhada para fins fiscais, cont√°beis ou de detec√ß√£o de fraudes.

        **Siga estas regras:**
        1. **Foco Fiscal/Cont√°bil:** Suas an√°lises devem procurar por anomalias, padr√µes e tend√™ncias relevantes para balan√ßos, DRE, detec√ß√£o de gastos irregulares, ou an√°lise de transa√ß√µes.
        2. **Instru√ß√µes do Usu√°rio:** Use as regras fornecidas pelo usu√°rio ({custom_instructions}) para guiar suas an√°lises e decis√µes.
        3. **Ferramentas:** Use a ferramenta CSV Agent para gerar c√≥digo Python, realizar c√°lculos estat√≠sticos e extrair informa√ß√µes.
        4. **Gr√°ficos:** **SEMPRE** que o usu√°rio solicitar uma visualiza√ß√£o, utilize **Plotly**. **NUNCA USE MATPLOTLIB OU SEABORN**. Quando gerar um gr√°fico, o c√≥digo Python da ferramenta DEVE **imprimir a representa√ß√£o JSON do gr√°fico** usando `fig.to_json()` para que o Streamlit possa renderiz√°-lo. Ap√≥s gerar o JSON, **n√£o inclua mais texto na resposta**.
        5. **Linguagem:** Responda **sempre em Portugu√™s**, de forma clara e profissional.
        6. **Conclus√µes Finais:** Use a mem√≥ria de chat e as an√°lises para gerar uma se√ß√£o de conclus√µes detalhadas sobre o conjunto de dados.
        
        Hist√≥rico da Conversa: {{chat_history}}
        Pergunta do Usu√°rio: {{input}}
        Resposta:
        """
        # A ConversationChain √© usada para a mem√≥ria da sess√£o e o relat√≥rio final.
        conversation = ConversationChain(
            llm=llm,
            memory=memory,
            prompt=PromptTemplate(template=analyst_prompt, input_variables=["chat_history", "input"])
        )

        return llm, conversation, memory
    
    except Exception as e:
        st.error(f"Erro ao inicializar o LLM: {e}")
        return None, None, None

def decompress_file(uploaded_file):
    """Descompacta arquivos ZIP ou GZ e retorna o caminho para o CSV tempor√°rio."""
    file_name = uploaded_file.name
    file_extension = file_name.split('.')[-1].lower()
    
    # 1. Cria um arquivo tempor√°rio no disco para o arquivo CSV final
    with tempfile.NamedTemporaryFile(suffix=".csv", delete=False) as tmp_csv:
        tmp_csv_path = tmp_csv.name
    
    # 2. Processa arquivos ZIP
    if file_extension == 'zip':
        try:
            with zipfile.ZipFile(io.BytesIO(uploaded_file.getvalue()), 'r') as zip_ref:
                # Procura pelo primeiro arquivo CSV dentro do ZIP
                csv_in_zip = [f for f in zip_ref.namelist() if f.endswith('.csv')][0]
                with zip_ref.open(csv_in_zip) as csv_file:
                    with open(tmp_csv_path, 'wb') as f:
                        f.write(csv_file.read())
                st.sidebar.success(f"Arquivo ZIP descompactado. Analisando '{csv_in_zip}'.")
                return tmp_csv_path
        except Exception as e:
            st.sidebar.error(f"Erro ao descompactar o arquivo ZIP: {e}")
            return None
    
    # 3. Processa arquivos GZ (GZIP)
    elif file_extension == 'gz':
        try:
            with gzip.open(uploaded_file, 'rb') as f_in:
                with open(tmp_csv_path, 'wb') as f_out:
                    f_out.write(f_in.read())
            st.sidebar.success(f"Arquivo GZ descompactado. Analisando o conte√∫do.")
            return tmp_csv_path
        except Exception as e:
            st.sidebar.error(f"Erro ao descompactar o arquivo GZ: {e}")
            return None
            
    # 4. Arquivo CSV normal (simplesmente salva para que o agente possa ler do disco)
    elif file_extension == 'csv':
        try:
            with open(tmp_csv_path, 'wb') as f:
                f.write(uploaded_file.getvalue())
            return tmp_csv_path
        except Exception as e:
            st.sidebar.error(f"Erro ao salvar o arquivo CSV: {e}")
            return None
    
    else:
        st.sidebar.error("Formato de arquivo n√£o suportado. Use CSV, ZIP ou GZ.")
        return None

def create_data_agent(_llm, _csv_path):
    """Cria o agente CSV usando o caminho do arquivo."""
    try:
        return create_csv_agent(
            _llm, 
            _csv_path, 
            verbose=True, 
            agent_type="zero-shot-react-description", # Tipo de agente mais robusto para Gemini
            allow_dangerous_code=True,
            handle_parsing_errors=True 
        )
    except Exception as e:
        st.error(f"Erro ao inicializar o agente de IA: {e}")
        return None

# --- Interface e Execu√ß√£o ---

st.title("üõ°Ô∏è Multi Agente Analista de CSV Fiscal")
st.markdown("Fa√ßa o upload de qualquer arquivo CSV, ZIP ou GZ para come√ßar a an√°lise fiscal e cont√°bil. Defina regras personalizadas na barra lateral.")


# --- BARRA LATERAL (Sidebar) ---
st.sidebar.header("Configura√ß√£o do Analista")

# 1. Componente de Upload
uploaded_file = st.sidebar.file_uploader(
    "1. Fa√ßa o Upload do Arquivo (CSV, ZIP ou GZ)", 
    type=["csv", "zip", "gz"]
)

# 2. Componente de Instru√ß√µes Personalizadas
custom_instructions = st.sidebar.text_area(
    "2. Instru√ß√µes/Regras Espec√≠ficas para o Agente",
    "Ex: Focar apenas em transa√ß√µes acima de R$10.000 ou analisar o desempenho do 'Departamento Contas a Pagar'.",
    height=150
)

# Inicializa o LLM e a Mem√≥ria com as instru√ß√µes personalizadas
llm, conversation_chain, memory = load_llm_and_memory(custom_instructions)

data_agent_executor = None

if uploaded_file is not None and llm:
    # Processa e descompacta o arquivo se necess√°rio
    tmp_file_path = decompress_file(uploaded_file)

    if tmp_file_path:
        # 3. Cria o agente com o caminho tempor√°rio
        data_agent_executor = create_data_agent(llm, tmp_file_path)

        # Armazena o agente na sess√£o
        if 'data_agent' not in st.session_state or st.session_state.current_file != uploaded_file.name:
            st.session_state.data_agent = data_agent_executor
            st.session_state.current_file = uploaded_file.name
            st.session_state.messages = [] # Limpa o chat para o novo arquivo
            st.sidebar.success(f"Arquivo '{uploaded_file.name}' carregado e agente inicializado!")

            # Simula a pergunta inicial (O Agente precisa come√ßar com uma tarefa para evitar o erro de parsing)
            initial_q1 = (
                f"O arquivo {uploaded_file.name} foi carregado. Suas instru√ß√µes s√£o: '{custom_instructions}'. "
                f"Agora, descreva os dados: Quais s√£o as colunas, tipos de dados e n√∫mero de linhas/colunas?"
            )
            st.session_state.messages.append({"role": "user", "content": initial_q1})
            
            with st.spinner(f"Agente pensando em: {initial_q1[:50]}..."):
                try:
                    # O agente executa a an√°lise inicial
                    # Usamos o m√©todo .run() que √© mais adequado para a primeira pergunta do zero-shot-react-description
                    response = st.session_state.data_agent.run(initial_q1)
                except Exception as e:
                    # Tratamento de erro robusto para a inicializa√ß√£o
                    response = (
                        f"O agente inicializou, mas encontrou um erro ao tentar a primeira an√°lise. "
                        f"Tente perguntar novamente ou fa√ßa uma pergunta mais simples. Detalhes: {e}"
                    )
                    st.error(response)
                    
            st.session_state.messages.append({"role": "assistant", "content": response})

            # Mostra o cabe√ßalho do arquivo
            try:
                df_preview = pd.read_csv(tmp_file_path, low_memory=False)
                st.subheader(f"Pr√©-visualiza√ß√£o do Arquivo: {uploaded_file.name}")
                st.dataframe(df_preview.head())
            except Exception as e:
                 st.warning(f"N√£o foi poss√≠vel exibir a pr√©-visualiza√ß√£o do arquivo. Detalhes: {e}")
            
            # Remove o arquivo tempor√°rio
            os.remove(tmp_file_path)
            
# --- Bloco de Gera√ß√£o de Relat√≥rio e Chat ---

if 'data_agent' in st.session_state and st.session_state.data_agent:
    st.markdown("---")
    
    # 3. Bot√£o de Gera√ß√£o de Relat√≥rio na Barra Lateral
    if st.sidebar.button("üìù Gerar Relat√≥rio Completo", type="primary"):
        # Prompt usa a mem√≥ria da ConversationChain para resumir a sess√£o
        report_prompt = (
            "Gere um relat√≥rio completo e estruturado em Markdown, com base em todas as an√°lises realizadas at√© agora "
            "nesta sess√£o de chat. Inclua uma Introdu√ß√£o (mencionando o arquivo analisado e as instru√ß√µes do usu√°rio), "
            "An√°lise Estat√≠stica (com base nas perguntas feitas e respostas), e uma Conclus√£o final sobre os dados. "
            "N√ÉO use a ferramenta CSV Agent para isso, apenas resuma o hist√≥rico do chat."
        )
        with st.spinner("Gerando relat√≥rio final e estruturado..."):
            try:
                # O ConversationChain usa o hist√≥rico (chat_history)
                final_report = conversation_chain.run(report_prompt)
                st.session_state['final_report_content'] = final_report
                st.sidebar.success("Relat√≥rio gerado com sucesso! Baixe abaixo.")
            except Exception as e:
                st.sidebar.error(f"Erro ao gerar o relat√≥rio: {e}")

    # 4. Download button para o relat√≥rio gerado na Barra Lateral
    if 'final_report_content' in st.session_state:
        st.sidebar.download_button(
            label="‚¨áÔ∏è Baixar Relat√≥rio em Markdown",
            data=st.session_state['final_report_content'],
            file_name=f"Relatorio_{st.session_state.current_file.replace('.csv', '').replace('.', '')}.md",
            mime="text/markdown"
        )
        st.markdown("---")


    # --- Exibi√ß√£o do Hist√≥rico do Chat ---
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            content = message["content"]
            
            # Tenta analisar se o conte√∫do √© um JSON de gr√°fico Plotly
            is_plotly_json = False
            try:
                # Remove qualquer ru√≠do (como 'Final Answer: ' que o agente pode adicionar)
                clean_content = content.strip().replace("Final Answer:", "").strip()
                
                # Tenta carregar o conte√∫do como JSON
                fig_json = json.loads(clean_content)
                
                # Verifica se √© um objeto Plotly v√°lido
                if 'data' in fig_json and 'layout' in fig_json:
                    fig = pio.from_json(clean_content)
                    st.plotly_chart(fig, use_container_width=True)
                    is_plotly_json = True
                
            except (json.JSONDecodeError, ValueError, KeyError):
                # N√£o √© um JSON de gr√°fico Plotly, ent√£o continua
                pass

            if not is_plotly_json:
                st.markdown(content)
    
    # --- Entrada do Usu√°rio (Bloco de Chat) ---
    if prompt := st.chat_input("Fa√ßa sua pergunta ao Agente Analista (Ex: Calcule a m√©dia da coluna 'Valor' e gere um histograma dela):"):
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("Agente de IA est√° analisando os dados..."):
                try:
                    # Envia a pergunta para o agente de dados
                    # O m√©todo .run() √© usado aqui para o agente de dados
                    response = st.session_state.data_agent.run(prompt)
                    st.session_state.messages.append({"role": "assistant", "content": response})
                    
                except Exception as e:
                    # Este bloco de exce√ß√£o captura e exibe erros, permitindo que o app continue
                    error_message = (
                        f"O Agente encontrou um erro ao processar sua requisi√ß√£o. Por favor, tente reformular a pergunta "
                        f"ou verificar se o arquivo CSV est√° bem formatado. Detalhes: {e}"
                    )
                    st.error(error_message)
                    st.session_state.messages.append({"role": "assistant", "content": error_message})
else:
    st.info("Por favor, fa√ßa o upload de um arquivo CSV, ZIP ou GZ para come√ßar a an√°lise.")
