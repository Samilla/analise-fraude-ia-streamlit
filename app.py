# -*- coding: utf-8 -*-
# Agente de An√°lise de Dados e Detec√ß√£o de Fraudes com Gemini e LangChain
# Desenvolvido para um projeto de curso de Agentes de IA.

import streamlit as st
import pandas as pd
import os
import tempfile
import zipfile
import gzip
import io
import json
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents.agent_types import AgentType
from langchain_experimental.agents.agent_toolkits import create_csv_agent
from langchain.schema import HumanMessage, SystemMessage
from langchain.memory import ConversationBufferWindowMemory # Usado apenas para o hist√≥rico do chat (fora do agente)
from langchain.agents import AgentExecutor
import plotly.express as px
import plotly.io as pio

# --- Configura√ß√µes Iniciais do Streamlit ---
st.set_page_config(layout="wide", page_title="Multi Agente de An√°lise de Dados e Fraude")

# --- Constantes e Vari√°veis Globais ---
pio.templates.default = "plotly_white"
MODEL_NAME = "gemini-2.5-flash"

# Tenta obter a chave da API do Gemini do secrets.toml (Streamlit Cloud)
try:
    API_KEY = st.secrets["GEMINI_API_KEY"]
except (KeyError, AttributeError):
    # Se estiver rodando localmente sem secrets.toml, usa vari√°vel de ambiente
    API_KEY = os.environ.get("GEMINI_API_KEY", "")

if not API_KEY:
    st.error("ERRO: Chave da API do Gemini n√£o encontrada. Configure a chave no .streamlit/secrets.toml ou na vari√°vel de ambiente GEMINI_API_KEY.")

# --- Fun√ß√µes de Manipula√ß√£o de Arquivos ---

@st.cache_data(show_spinner="Descompactando arquivo...")
def unzip_and_read_file(uploaded_file):
    """
    Descompacta arquivos ZIP ou GZ e l√™ o conte√∫do CSV.
    Retorna o nome tempor√°rio do arquivo e o DataFrame.
    """
    file_extension = uploaded_file.name.lower().split('.')[-1]
    
    if file_extension == 'zip':
        with zipfile.ZipFile(uploaded_file, 'r') as zf:
            # Tenta encontrar o primeiro CSV dentro do ZIP
            csv_files = [name for name in zf.namelist() if name.endswith('.csv')]
            if not csv_files:
                return None, None
            
            # L√™ o primeiro CSV encontrado
            with zf.open(csv_files[0]) as csv_file:
                df = pd.read_csv(csv_file)
                # Salva o arquivo em disco tempor√°rio para o agente acessar
                with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp_file:
                    df.to_csv(tmp_file.name, index=False)
                    return tmp_file.name, df
    
    elif uploaded_file.name.endswith('.gz'):
        # Lida com arquivos GZ (que podem ser CSVs gzipados)
        try:
            with gzip.open(uploaded_file, 'rt') as gz_file:
                df = pd.read_csv(gz_file)
                # Salva o arquivo em disco tempor√°rio para o agente acessar
                with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp_file:
                    df.to_csv(tmp_file.name, index=False)
                    return tmp_file.name, df
        except Exception:
            return None, None

    elif file_extension == 'csv':
        # Arquivo CSV normal
        df = pd.read_csv(uploaded_file)
        # Salva o arquivo em disco tempor√°rio para o agente acessar
        with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp_file:
            uploaded_file.seek(0)
            tmp_file.write(uploaded_file.read())
            return tmp_file.name, df
    
    return None, None

# --- Fun√ß√µes do Agente ---

def load_llm_and_memory(temp_csv_path):
    """
    Cria e carrega a mem√≥ria e o agente de IA com o prompt de especialista.
    """
    # 1. Prompt do Especialista (Regras R√≠gidas)
    analyst_prompt = f"""
    Voc√™ √© um Multi Agente de IA SUPER ESPECIALISTA em Contabilidade, An√°lise de Dados e Desenvolvimento Python.
    Sua miss√£o √© atuar como um Analista de Dados e Fraudes, capaz de analisar qualquer arquivo CSV fiscal, cont√°bil ou operacional fornecido pelo usu√°rio.

    **Voc√™ DEVE seguir estas regras estritamente:**
    1. **Personalidade:** Seja objetivo, t√©cnico e focado em fornecer insights e c√≥digo Python (quando solicitado).
    2. **Foco:** Use as colunas e dados do arquivo CSV fornecido, que est√° em '{temp_csv_path}', para responder a todas as perguntas.
    3. **Mem√≥ria:** Use o hist√≥rico de chat fornecido para manter o contexto e as conclus√µes.
    4. **Gr√°ficos:** **SEMPRE** que o usu√°rio solicitar uma visualiza√ß√£o, utilize a biblioteca **Plotly**.
       **Aten√ß√£o:** **NUNCA USE MATPLOTLIB OU SEABORN.**
       O seu output final para gr√°ficos **DEVE** ser uma string JSON v√°lida do Plotly (`fig.to_json()`) para que o Streamlit possa renderizar a imagem.
    5. **Sa√≠da Final:** O resultado final de sua an√°lise deve ser claro e conciso.

    **Instru√ß√µes Espec√≠ficas do Usu√°rio:** O usu√°rio forneceu instru√ß√µes espec√≠ficas no sidebar que voc√™ deve integrar √† sua an√°lise: "{st.session_state.user_instructions}"
    """

    # 2. Configura√ß√£o do Modelo e Agente
    try:
        llm = ChatGoogleGenerativeAI(model=MODEL_NAME, google_api_key=API_KEY)
    except Exception as e:
        # Erro na inicializa√ß√£o do LLM
        st.error(f"Erro fatal ao inicializar o LLM Gemini. Detalhes: {e}")
        return None, None 
    
    # 3. Inicializa√ß√£o da Mem√≥ria (fora do agente)
    # A mem√≥ria ser√° gerenciada manualmente via hist√≥rico do chat (chat_history_list)
    memory = ConversationBufferWindowMemory(
        memory_key="chat_history",
        input_key="input",
        return_messages=True,
        k=5, 
        ai_prefix="Analista"
    )

    # 4. Cria√ß√£o do Agente (Bloco de seguran√ßa final)
    try:
        # A mem√≥ria foi removida daqui para evitar o conflito de inicializa√ß√£o
        agent = create_csv_agent(
            llm=llm,
            path=temp_csv_path,
            verbose=True,
            agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION, 
            extra_tools=None,
            prefix=analyst_prompt,
            allow_dangerous_code=True
        )
        return memory, agent
    except Exception as e:
        # Este √© o erro que deve ser exposto se a API falhar
        print(f"DEBUG: FALHA CR√çTICA NA CRIA√á√ÉO DO AGENTE (PROVAVELMENTE CONEX√ÉO OU VERS√ÉO): {e}")
        st.error(f"Erro CR√çTICO ao criar o Agente CSV. Verifique a API Key e as logs. Detalhes: {e}")
        return None, None 

def parse_and_display_response(response_text):
    """
    Analisa a resposta do agente, procurando por JSON do Plotly.
    Se encontrar, renderiza o gr√°fico; caso contr√°rio, exibe como texto.
    """
    try:
        # Padr√£o para tentar extrair um JSON Plotly
        # O agente deve retornar o JSON como uma string, muitas vezes entre aspas ou chaves
        start_index = response_text.find('{')
        end_index = response_text.rfind('}')
        
        if start_index != -1 and end_index != -1 and end_index > start_index:
            json_str = response_text[start_index:end_index + 1]
            # Tenta carregar o JSON e renderizar o gr√°fico
            fig_dict = json.loads(json_str)
            fig = pio.from_json(json.dumps(fig_dict))
            
            # Renderiza o gr√°fico e exibe a mensagem de sucesso
            st.plotly_chart(fig, use_container_width=True)
            
            # Remove o JSON da resposta para exibir apenas o texto explicativo
            text_response = response_text[:start_index].strip()
            if not text_response:
                text_response = "Gr√°fico gerado com sucesso. Analise a visualiza√ß√£o acima."
                
            return text_response
    
    except Exception as e:
        # Se falhar ao processar o JSON, assume que √© apenas texto
        pass

    # Se n√£o for JSON Plotly, retorna a resposta como est√°
    return response_text

# --- Layout e Interface ---

st.title("ü§ñ Multi Agente de An√°lise Fiscal e de Fraudes")
st.markdown("---")

# Inicializa√ß√£o de estado para mem√≥ria e agente
if 'data_agent' not in st.session_state:
    st.session_state.data_agent = None
if 'memory' not in st.session_state:
    st.session_state.memory = None
if 'chat_history_list' not in st.session_state:
    st.session_state.chat_history_list = []
if 'report_content' not in st.session_state:
    st.session_state.report_content = ""
if 'user_instructions' not in st.session_state:
    st.session_state.user_instructions = "Nenhuma instru√ß√£o espec√≠fica fornecida."

# --- Barra Lateral (Configura√ß√µes e Upload) ---

with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes de An√°lise")
    
    # 1. Upload de Arquivo
    uploaded_file = st.file_uploader(
        "Carregue seu arquivo CSV, ZIP ou GZ:",
        type=['csv', 'zip', 'gz'],
        key="file_uploader"
    )
    
    # 2. Instru√ß√µes Personalizadas
    st.subheader("Instru√ß√µes de An√°lise")
    instructions = st.text_area(
        "Instru√ß√µes e Foco do Agente (Ex: Focar em contas de alto risco):",
        height=150,
        placeholder="Nenhuma instru√ß√£o espec√≠fica. (O agente far√° uma an√°lise geral)",
        key="user_instructions_input"
    )
    st.session_state.user_instructions = instructions if instructions else "Nenhuma instru√ß√£o espec√≠fica fornecida."
    
    # 3. Bot√£o de Relat√≥rio Completo
    st.subheader("Relat√≥rio Final")
    report_btn = st.button("üìù Gerar Relat√≥rio Completo", use_container_width=True)
    
    # 4. Bot√£o de Download (Depende do conte√∫do do relat√≥rio)
    if st.session_state.report_content:
        st.download_button(
            label="‚¨áÔ∏è Baixar Relat√≥rio (Markdown)",
            data=st.session_state.report_content,
            file_name="relatorio_analise_ia.md",
            mime="text/markdown",
            use_container_width=True
        )

# --- Processamento do Arquivo ---

if uploaded_file and st.session_state.data_agent is None:
    temp_csv_path, df = unzip_and_read_file(uploaded_file)
    
    if temp_csv_path and df is not None:
        try:
            # Inicializa o agente
            st.session_state.memory, st.session_state.data_agent = load_llm_and_memory(temp_csv_path)
            
            # Adiciona mensagem de sucesso
            if st.session_state.data_agent is not None:
                st.success(f"Arquivo '{uploaded_file.name}' carregado e agente inicializado!")
                
                # Pergunta inicial para auto-descri√ß√£o do arquivo
                initial_q1 = f"Descreva os dados: Quais s√£o as colunas, tipos de dados e o formato geral do arquivo? {df.shape[0]} linhas e {df.shape[1]} colunas."
                
                # Executa a primeira an√°lise para preencher o chat
                with st.spinner(f"Agente analisando o arquivo..."):
                    try:
                        # Executa a pergunta inicial e armazena a resposta
                        response_obj = st.session_state.data_agent.run(initial_q1)
                        initial_response = parse_and_display_response(response_obj)
                        
                        st.session_state.chat_history_list.append(("user", initial_q1))
                        st.session_state.chat_history_list.append(("agent", initial_response))
                        
                    except Exception as e:
                        # Lida com erros de parsing logo na primeira pergunta
                        st.session_state.chat_history_list.append(("user", initial_q1))
                        st.session_state.chat_history_list.append(("agent", f"O Agente inicializou, mas encontrou um erro ao tentar a primeira an√°lise. O problema de 'Output Parsing' pode ocorrer. Por favor, fa√ßa uma pergunta simples como 'Quais colunas existem?' para testar o agente."))
                        print(f"Erro no primeiro parsing: {e}")
            else:
                st.error("Falha ao inicializar o agente. Verifique a chave da API e as mensagens de erro na lateral.")
                    
        except Exception as e:
            st.error(f"Erro grave ao processar o arquivo: {e}")
    
    elif uploaded_file:
        st.error("Formato de arquivo n√£o suportado ou erro ao descompactar. Certifique-se de que √© um CSV v√°lido, ZIP ou GZ.")

# --- Processamento do Relat√≥rio ---

if report_btn and st.session_state.data_agent:
    # Pergunta que for√ßa o agente a gerar um relat√≥rio completo
    report_prompt = """
    Gere um relat√≥rio completo da an√°lise de dados realizada at√© agora, incorporando as seguintes se√ß√µes em Markdown formatado:
    1. **Resumo Executivo (Conclus√£o do Agente):** Quais s√£o as principais conclus√µes encontradas e padr√µes/anomalias mais importantes?
    2. **Descri√ß√£o dos Dados:** Detalhes de colunas, tipos de dados, e medidas centrais/dispers√£o.
    3. **Rela√ß√µes e Tend√™ncias:** Quais foram as correla√ß√µes mais fortes e tend√™ncias identificadas.
    4. **Sugest√µes:** Recomenda√ß√µes finais baseadas na an√°lise (Ex: colunas a investigar para fraude).

    Sua resposta deve ser SOMENTE o conte√∫do do relat√≥rio em Markdown.
    """
    
    with st.spinner("Gerando relat√≥rio completo... Isso pode levar alguns momentos."):
        try:
            # Roda o agente com o prompt de relat√≥rio
            report_response = st.session_state.data_agent.run(report_prompt)
            
            st.session_state.report_content = report_response
            st.success("Relat√≥rio gerado com sucesso! Use o bot√£o 'Baixar Relat√≥rio (Markdown)' na lateral.")
            
        except Exception as e:
            st.error(f"Erro ao gerar o relat√≥rio: {e}")

# --- Interface de Chat ---

# Exibe o hist√≥rico de chat
for role, message in st.session_state.chat_history_list:
    if role == "user":
        st.chat_message("user").markdown(message)
    else:
        # Usa o parser para renderizar a mensagem do agente (incluindo gr√°ficos)
        parsed_message = parse_and_display_response(message)
        st.chat_message("assistant").markdown(parsed_message)

# Campo de entrada de prompt do usu√°rio
if st.session_state.data_agent:
    if prompt := st.chat_input("Fa√ßa sua pergunta ao Agente... (Ex: Qual a correla√ß√£o entre Amount e Time?)"):
        st.session_state.chat_history_list.append(("user", prompt))
        st.chat_message("user").markdown(prompt)

        with st.spinner("Agente de IA est√° processando..."):
            try:
                # Executa a pergunta e armazena a resposta
                # Usando .run() para maior simplicidade de sa√≠da, mas com parsing robusto
                response_obj = st.session_state.data_agent.run(prompt)
                
                # Garante que a resposta completa seja armazenada para an√°lise e mem√≥ria
                parsed_response = parse_and_display_response(response_obj)
                
                # Adiciona a resposta ao hist√≥rico
                st.session_state.chat_history_list.append(("agent", response_obj))
                
                # Exibe a resposta final (se n√£o for um gr√°fico, ser√° exibido como texto)
                st.chat_message("assistant").markdown(parsed_response)

            except Exception as e:
                # Tratamento robusto de erro para evitar quebras do aplicativo
                st.session_state.chat_history_list.append(("agent", "O Agente encontrou um erro ao processar sua requisi√ß√£o. Por favor, tente reformular a pergunta ou verificar se o arquivo CSV est√° bem formatado. Detalhes: An output parsing error occurred. Tente reiniciar o aplicativo se o erro persistir."))
                print(f"Erro na execu√ß√£o do agente (run): {e}")
                st.experimental_rerun() # Reinicia para limpar o estado em caso de erro grave

# Footer para indicar o estado
if st.session_state.data_agent is None:
    st.info("‚ö†Ô∏è Carregue um arquivo CSV, ZIP ou GZ para iniciar a an√°lise.")

# Limpa o arquivo tempor√°rio ao finalizar o Streamlit
if 'temp_csv_path' in locals() and os.path.exists(temp_csv_path):
    os.remove(temp_csv_path)

